<?php
/**
 * Akismet integrator API for Zikula
 *
 * @author Mark West
 * @link http://www.markwest.me.uk
 * @version $Id$
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_3rdParty_Modules
 * @subpackage akismet
*/

/**
 * Adminstration entry point
 *
 * @author Mark West
 * @return string HTML output string
 */
function akismet_admin_main()
{
    // security check
    if (!SecurityUtil::checkPermission( 'akismet::' ,'::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $renderer = & pnRender::getInstance('akismet', false);

    // Return the output that has been generated by this function
    return $renderer->fetch('akismet_admin_main.htm');
}

/**
 * Modify module configuration
 *
 * @author Mark West
 * @return string HTML output string
 */
function akismet_admin_modifyconfig()
{
    // security check
    if (!SecurityUtil::checkPermission( 'akismet::' ,'::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $renderer = & pnRender::getInstance('akismet', false);

    // assign all module vars
    $renderer->assign(pnModGetVar('akismet'));

    // Return the output that has been generated by this function
    return $renderer->fetch('akismet_admin_modifyconfig.htm');
}


/**
 * Update module configuration
 *
 * @author Mark West
 * @return mixed error string or true
 */
function akismet_admin_updateconfig()
{
    $dom = ZLanguage::getModuleDomain('akismet');
    // security check
    if (!SecurityUtil::checkPermission( 'akismet::' ,'::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('Bad_Behaviour', 'admin'));
    }

    // get our input
    $enable = (bool)FormUtil::getPassedValue('enable', false, 'POST');
    $apikey = (string)FormUtil::getPassedValue('apikey', '', 'POST');

    // validate the key
    if (!pnModAPIFunc('akismet', 'user', 'verifykey', array('apikey' => $apikey))) {
        LogUtil::registerError(__('Error! Sorry! Invalid API key. Please obtain one from http://wordpress.com/api-keys/.', $dom));
        pnModSetVar('akismet', 'apikeyvalid', false);
        return pnRedirect(pnModURL('akismet', 'admin'));
    } else {
        pnModSetVar('akismet', 'apikeyvalid', true);
    }

    // set our new values
    pnModSetVar('akismet', 'enable', $enable);
    pnModSetVar('akismet', 'apikey', $apikey);

    // the module configuration has been updated successfuly
    LogUtil::registerStatus (__('Done! Module configuration updated.', $dom));

    // Let any other modules know that the modules configuration has been updated
    pnModCallHooks('module', 'updateconfig', 'akismet', array('module' => 'akismet'));

    return pnRedirect(pnModURL('akismet', 'admin'));
}
